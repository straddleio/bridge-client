{"version":3,"file":"index.esm.js","sources":["../src/StraddleBridge.tsx"],"sourcesContent":["'use client'\nimport { EBridgeMessageType } from '@straddleio/bridge-core'\nimport { CSSProperties, forwardRef, Ref, useEffect, useState } from 'react'\n\nconst IFRAME_ID = 'Straddle-widget-iframe'\n\ntype TMessage = Record<string, any> & { type: EBridgeMessageType }\nexport const useStraddleBridge = ({ appUrl }: { appUrl: string }) => {\n    const [iframeMounted, setIframeMounted] = useState(false)\n    const [bridgeAppMounted, setBridgeAppMounted] = useState(false)\n\n    const parentOrigin = getParentOrigin()\n    const url = `${appUrl}/${parentOrigin}/`\n    const send = (message: TMessage) => {\n        const iframe = document.getElementById(IFRAME_ID) as HTMLIFrameElement\n        if (iframe) {\n            iframe.contentWindow?.postMessage(message, url)\n        }\n    }\n    return { send, iframeMounted, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url }\n}\nconst getParentOrigin = () => typeof window !== 'undefined' && encodeURIComponent(window.location.origin)\n\ntype TypeStraddleBridgeProps = {\n    appUrl: string\n    open?: boolean\n    token: string\n    onSuccess?: (payload: any) => void\n    onSuccessCTAClicked?: () => void\n    onClose?: () => void\n    className?: string\n    style?: CSSProperties\n}\n\nexport const StraddleBridge = forwardRef<HTMLElement, TypeStraddleBridgeProps & { verbose?: boolean }>((props, ref) => {\n    const { appUrl, open = true, token, onSuccess, onSuccessCTAClicked, onClose, className, style, verbose } = props\n    const { send, iframeMounted, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url } = useStraddleBridge({ appUrl })\n    useEffect(() => {\n        if (open && !iframeMounted) {\n            setIframeMounted(true)\n            const iframe = document.createElement('iframe')\n            iframe.setAttribute('src', url)\n            iframe.id = IFRAME_ID\n            let iframe_style = style\n            if (!style) {\n                iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647' }\n            }\n            iframe_style && Object.assign(iframe.style, iframe_style)\n\n            if (className) {\n                className.split(' ').forEach((className) => {\n                    iframe.classList.add(className)\n                })\n            }\n            if (ref && 'current' in ref) {\n                ;(ref.current as HTMLElement).appendChild(iframe)\n            } else {\n                document.getElementsByTagName('body')[0].appendChild(iframe)\n            }\n\n            window.addEventListener('message', function (event) {\n                // Make sure the message is from the expected origin\n                if (event.origin === appUrl) {\n                    verbose && console.log('Message received from widget:', event.data.type, event)\n                    switch (event.data?.type) {\n                        case EBridgeMessageType.PING:\n                            break\n                        case EBridgeMessageType.MOUNTED:\n                            if (!bridgeAppMounted) {\n                                setBridgeAppMounted(true)\n                                send({ type: EBridgeMessageType.INITIALIZE, token })\n                            }\n                            break\n                        case EBridgeMessageType.ON_CLOSE:\n                            onClose?.()\n                            setBridgeAppMounted(false)\n                            document.querySelector(`#${IFRAME_ID}`)?.remove()\n                            break\n                        case EBridgeMessageType.ON_SUCCESS_CTA_CLICKED:\n                            onSuccessCTAClicked?.()\n                            break\n                        case EBridgeMessageType.ON_PAYKEY:\n                            onSuccess?.(event.data)\n                            break\n                        case '@straddleio/bridge-js/log':\n                            {\n                                const parsedPayload: any = event.data.payload.map((item: any) => {\n                                    try {\n                                        return JSON.parse(item)\n                                    } catch {\n                                        return item\n                                    }\n                                })\n                                ;(console[event.data.method as keyof typeof console] as Function).apply(console, parsedPayload)\n                            }\n                            break\n                    }\n                }\n            })\n        } else if (!open && iframeMounted) {\n            document.querySelector(`#${IFRAME_ID}`)?.remove()\n            setIframeMounted(false)\n            setBridgeAppMounted(false)\n        }\n    }, [open, bridgeAppMounted])\n    useEffect(() => {\n        typeof window !== 'undefined' &&\n            ((window as any).verbose = {\n                enable: () => send({ type: EBridgeMessageType.DEBUG, enable: true }),\n                disable: () => send({ type: EBridgeMessageType.DEBUG, enable: false }),\n            })\n    }, [])\n    return null\n})\n\nStraddleBridge.displayName = 'StraddleBridge'\n"],"names":["IFRAME_ID","useStraddleBridge","appUrl","iframeMounted","setIframeMounted","useState","bridgeAppMounted","setBridgeAppMounted","url","getParentOrigin","send","message","iframe","document","getElementById","_a","contentWindow","postMessage","window","encodeURIComponent","location","origin","StraddleBridge","forwardRef","props","ref","open","token","onSuccess","onSuccessCTAClicked","onClose","className","style","verbose","useEffect","createElement","setAttribute","id","iframe_style","position","width","height","top","left","zIndex","Object","assign","split","forEach","classList","add","current","appendChild","getElementsByTagName","addEventListener","event","console","log","data","type","EBridgeMessageType","PING","MOUNTED","INITIALIZE","ON_CLOSE","_b","querySelector","remove","ON_SUCCESS_CTA_CLICKED","ON_PAYKEY","parsedPayload","payload","map","item","JSON","parse","method","apply","enable","DEBUG","disable","displayName"],"mappings":"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"}