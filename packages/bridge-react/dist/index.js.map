{"version":3,"file":"index.js","sources":["../src/StraddleBridge.tsx"],"sourcesContent":["'use client'\nimport { EBridgeMessageType } from '@straddleio/bridge-core'\nimport { CSSProperties, forwardRef, Ref, useEffect, useRef, useState } from 'react'\n\nconst IFRAME_ID = 'Straddle-widget-iframe'\n\ntype TMessage = Record<string, any> & { type: EBridgeMessageType }\nexport const useStraddleBridge = ({ appUrl }: { appUrl: string }) => {\n    const [iframeMounted, setIframeMounted] = useState(false)\n    const [bridgeAppMounted, setBridgeAppMounted] = useState(false)\n\n    const parentOrigin = getParentOrigin()\n    const url = `${appUrl}/${parentOrigin}/`\n    const send = (message: TMessage) => {\n        const iframe = document.getElementById(IFRAME_ID) as HTMLIFrameElement\n        if (iframe) {\n            iframe.contentWindow?.postMessage(message, url)\n        }\n    }\n    return { send, iframeMounted, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url }\n}\nconst getParentOrigin = () => typeof window !== 'undefined' && encodeURIComponent(window.location.origin)\n\ntype TypeStraddleBridgeProps = {\n    appUrl: string\n    open?: boolean\n    token: string\n    onSuccess?: (payload: any) => void\n    onSuccessCTAClicked?: () => void\n    onClose?: () => void\n    onLoadError?: () => void\n    onManualEntry?: () => void\n    onRetry?: () => void\n    className?: string\n    style?: CSSProperties\n}\n\nexport const StraddleBridge = forwardRef<HTMLElement, TypeStraddleBridgeProps & { verbose?: boolean }>((props, ref) => {\n    const { appUrl, open = true, token, onSuccess, onSuccessCTAClicked, onClose, onLoadError, className, style, verbose } = props\n    const { send, setIframeMounted, bridgeAppMounted, setBridgeAppMounted, url } = useStraddleBridge({ appUrl })\n    const iframeMounted = useRef(false)\n    useEffect(() => {\n        if (open && !iframeMounted.current) {\n            iframeMounted.current = true\n            const iframe = document.createElement('iframe')\n            iframe.setAttribute('src', url)\n            iframe.setAttribute('src', url)\n            iframe.addEventListener('error', () => {\n                console.error('Error loading Straddle iframe')\n                onLoadError?.()\n            })\n            iframe.id = IFRAME_ID\n            let iframe_style = style\n            if (!style) {\n                iframe_style = { position: 'fixed', width: '100%', height: '100%', top: '0%', left: '0', zIndex: '2147483647' }\n            }\n            iframe_style && Object.assign(iframe.style, iframe_style)\n\n            if (className) {\n                className.split(' ').forEach((className) => {\n                    iframe.classList.add(className)\n                })\n            }\n            if (ref && 'current' in ref && ref.current && ref.current instanceof Node) {\n                ;(ref.current as HTMLElement).appendChild(iframe)\n            } else {\n                if (ref && 'current' in ref && (!ref.current || !(ref.current instanceof Node))) {\n                    console.warn('ref passed to StraddleBridge is not a valid ref, reverting to appening to body. Ref passed:', ref.current)\n                }\n                document.getElementsByTagName('body')[0].appendChild(iframe)\n            }\n\n            window.addEventListener('message', function (event) {\n                // Make sure the message is from the expected origin\n                if (event.origin === appUrl) {\n                    verbose &&\n                        event.data.type !== '@straddleio/bridge-js/log' &&\n                        console.log('Straddle Bridge React client, Message received from widget:', event.data.type, event)\n                    switch (event.data?.type) {\n                        case EBridgeMessageType.PING:\n                            break\n                        case EBridgeMessageType.MOUNTED:\n                            if (!bridgeAppMounted) {\n                                setBridgeAppMounted(true)\n                                send({ type: EBridgeMessageType.INITIALIZE, token })\n                            }\n                            break\n                        case EBridgeMessageType.ON_CLOSE:\n                            onClose?.()\n                            setBridgeAppMounted(false)\n                            document.querySelector(`#${IFRAME_ID}`)?.remove()\n                            break\n                        case EBridgeMessageType.ON_SUCCESS_CTA_CLICKED:\n                            onSuccessCTAClicked?.()\n                            break\n                        case EBridgeMessageType.ON_PAYKEY:\n                            onSuccess?.(event.data)\n                            break\n                        case '@straddleio/bridge-js/log':\n                            {\n                                const parsedPayload: any = event.data.payload.map((item: any) => {\n                                    try {\n                                        return JSON.parse(item)\n                                    } catch {\n                                        return item\n                                    }\n                                })\n                                ;(console[event.data.method as keyof typeof console] as Function).apply(console, parsedPayload)\n                            }\n                            break\n                    }\n                }\n            })\n        } else if (!open && iframeMounted) {\n            document.querySelector(`#${IFRAME_ID}`)?.remove()\n            setIframeMounted(false)\n            iframeMounted.current = false\n            setBridgeAppMounted(false)\n        }\n    }, [open, bridgeAppMounted])\n    useEffect(() => {\n        typeof window !== 'undefined' &&\n            ((window as any).verbose = {\n                enable: () => send({ type: EBridgeMessageType.DEBUG, enable: true }),\n                disable: () => send({ type: EBridgeMessageType.DEBUG, enable: false }),\n            })\n    }, [])\n    return null\n})\n\nStraddleBridge.displayName = 'StraddleBridge'\n"],"names":["IFRAME_ID","useStraddleBridge","appUrl","iframeMounted","setIframeMounted","useState","bridgeAppMounted","setBridgeAppMounted","url","getParentOrigin","send","message","iframe","document","getElementById","_a","contentWindow","postMessage","window","encodeURIComponent","location","origin","StraddleBridge","forwardRef","props","ref","open","token","onSuccess","onSuccessCTAClicked","onClose","onLoadError","className","style","verbose","useRef","useEffect","current","createElement","setAttribute","addEventListener","console","error","id","iframe_style","position","width","height","top","left","zIndex","Object","assign","split","forEach","classList","add","Node","appendChild","warn","getElementsByTagName","event","data","type","log","EBridgeMessageType","PING","MOUNTED","INITIALIZE","ON_CLOSE","_b","querySelector","remove","ON_SUCCESS_CTA_CLICKED","ON_PAYKEY","parsedPayload","payload","map","item","JSON","parse","method","apply","enable","DEBUG","disable","displayName"],"mappings":"yEAIA,MAAMA,EAAY,yBAGLC,EAAoB,EAAGC,aAChC,MAAOC,EAAeC,GAAoBC,EAAQA,UAAC,IAC5CC,EAAkBC,GAAuBF,EAAQA,UAAC,GAGnDG,EAAM,GAAGN,KADMO,OAQrB,MAAO,CAAEC,KANKC,UACV,MAAMC,EAASC,SAASC,eAAed,GACnCY,IACsB,QAAtBG,EAAAH,EAAOI,qBAAe,IAAAD,GAAAA,EAAAE,YAAYN,EAASH,GAC9C,EAEUL,gBAAeC,mBAAkBE,mBAAkBC,sBAAqBC,MAAK,EAE1FC,EAAkB,IAAwB,oBAAXS,QAA0BC,mBAAmBD,OAAOE,SAASC,QAgBrFC,EAAiBC,EAAUA,YAA+D,CAACC,EAAOC,KAC3G,MAAMvB,OAAEA,EAAMwB,KAAEA,GAAO,EAAIC,MAAEA,EAAKC,UAAEA,EAASC,oBAAEA,EAAmBC,QAAEA,EAAOC,YAAEA,EAAWC,UAAEA,EAASC,MAAEA,EAAKC,QAAEA,GAAYV,GAClHd,KAAEA,EAAIN,iBAAEA,EAAgBE,iBAAEA,EAAgBC,oBAAEA,EAAmBC,IAAEA,GAAQP,EAAkB,CAAEC,WAC7FC,EAAgBgC,UAAO,GAuF7B,OAtFAC,EAAAA,WAAU,WACN,GAAIV,IAASvB,EAAckC,QAAS,CAChClC,EAAckC,SAAU,EACxB,MAAMzB,EAASC,SAASyB,cAAc,UACtC1B,EAAO2B,aAAa,MAAO/B,GAC3BI,EAAO2B,aAAa,MAAO/B,GAC3BI,EAAO4B,iBAAiB,SAAS,KAC7BC,QAAQC,MAAM,iCACdX,SAAAA,GAAe,IAEnBnB,EAAO+B,GAAK3C,EACZ,IAAI4C,EAAeX,EACdA,IACDW,EAAe,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,OAAQC,IAAK,KAAMC,KAAM,IAAKC,OAAQ,eAErGN,GAAgBO,OAAOC,OAAOxC,EAAOqB,MAAOW,GAExCZ,GACAA,EAAUqB,MAAM,KAAKC,SAAStB,IAC1BpB,EAAO2C,UAAUC,IAAIxB,EAAU,IAGnCP,GAAO,YAAaA,GAAOA,EAAIY,SAAWZ,EAAIY,mBAAmBoB,KAC/DhC,EAAIY,QAAwBqB,YAAY9C,KAEtCa,KAAO,YAAaA,IAASA,EAAIY,SAAaZ,EAAIY,mBAAmBoB,MACrEhB,QAAQkB,KAAK,8FAA+FlC,EAAIY,SAEpHxB,SAAS+C,qBAAqB,QAAQ,GAAGF,YAAY9C,IAGzDM,OAAOsB,iBAAiB,WAAW,SAAUqB,WAEzC,GAAIA,EAAMxC,SAAWnB,EAIjB,OAHAgC,GACwB,8BAApB2B,EAAMC,KAAKC,MACXtB,QAAQuB,IAAI,8DAA+DH,EAAMC,KAAKC,KAAMF,GAC5E,UAAZA,EAAMC,YAAM,IAAA/C,OAAA,EAAAA,EAAAgD,MAChB,KAAKE,EAAkBA,mBAACC,KACpB,MACJ,KAAKD,EAAkBA,mBAACE,QACf7D,IACDC,GAAoB,GACpBG,EAAK,CAAEqD,KAAME,EAAAA,mBAAmBG,WAAYzC,WAEhD,MACJ,KAAKsC,EAAkBA,mBAACI,SACpBvC,SAAAA,IACAvB,GAAoB,GACmB,QAAvC+D,EAAAzD,SAAS0D,cAAc,IAAIvE,YAAY,IAAAsE,GAAAA,EAAEE,SACzC,MACJ,KAAKP,EAAkBA,mBAACQ,uBACpB5C,SAAAA,IACA,MACJ,KAAKoC,EAAkBA,mBAACS,UACpB9C,SAAAA,EAAYiC,EAAMC,MAClB,MACJ,IAAK,4BACD,CACI,MAAMa,EAAqBd,EAAMC,KAAKc,QAAQC,KAAKC,IAC/C,IACI,OAAOC,KAAKC,MAAMF,EACrB,CAAC,MAAA/D,GACE,OAAO+D,CACV,KAEHrC,QAAQoB,EAAMC,KAAKmB,QAA6CC,MAAMzC,QAASkC,EACpF,EAIjB,GACH,MAAWjD,GAAQvB,IACuB,QAAvCY,EAAAF,SAAS0D,cAAc,IAAIvE,YAAY,IAAAe,GAAAA,EAAEyD,SACzCpE,GAAiB,GACjBD,EAAckC,SAAU,EACxB9B,GAAoB,GACvB,GACF,CAACmB,EAAMpB,IACV8B,EAAAA,WAAU,KACY,oBAAXlB,SACDA,OAAegB,QAAU,CACvBiD,OAAQ,IAAMzE,EAAK,CAAEqD,KAAME,EAAkBA,mBAACmB,MAAOD,QAAQ,IAC7DE,QAAS,IAAM3E,EAAK,CAAEqD,KAAME,EAAkBA,mBAACmB,MAAOD,QAAQ,KAChE,GACP,IACI,IAAI,IAGf7D,EAAegE,YAAc"}